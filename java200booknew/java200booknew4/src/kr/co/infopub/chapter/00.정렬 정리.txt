
배열의 sort

	Arrays.sort(arr);

내림차순 sort

	Arrays.sort(arr3, Collections.reverseOrder());	

	Arrays.sort(arr4, Comparator.reverseOrder()); // 이것도 됨

(-> /java200booknew4/src/kr/co/infopub/chapter/s107/Test01.java)

--------------------

2차원 배열 sort

	int [][] arr = {{2,6}, {1,8}, {1,2}};

	Arrays.sort(arr, new Comparator<int[]>(){
		@Override
		public int compare(int[] o1, int[] o2) {
			return o1[0] - o2[0]; // 내림차순 정렬은 o2와 o1 의 위치를 바꾸어 줌
		}
	});

0번째 인덱스가 동일할 경우

	int [][] arr2 = {{2,6}, {1,8}, {1,2}};

	Arrays.sort(arr2, new Comparator<int[]>() {
		@Override
		public int compare(int[] o1, int[] o2) {
			if (o1[0] == o2[0]) { // 0번째가 같다면
				return o1[1]- o2[1]; // 1번째 인덱스를 비교
			} else {
				return o1[0]- o2[0];
			}
		}
	});

(-> /java200booknew4/src/kr/co/infopub/chapter/s107/Test02.java)

--------------------

Node 라는 클래스

	class Node {
		int idx;
		int val;
		
		public Node(int idx, int val) {
			this.idx = idx;
			this.val = val;
		}
	}

val 정렬

	Collections.sort(list, new Comparator<Node>() {
		@Override
		public int compare(Node o1, Node o2) {
			return o1.val - o2.val;
		}
	});

val 동일 할 경우 idx 로 정렬
	
	Collections.sort(list, new Comparator<Node>() {
		@Override
		public int compare(Node o1, Node o2) {
			if (o1.val == o2.val) {
				return o1.idx - o2.idx;
			} else {
				return o1.val - o2.val; // 기존과 동일
			}
		}
	});

(-> /java200booknew4/src/kr/co/infopub/chapter/s107/Test03.java)


