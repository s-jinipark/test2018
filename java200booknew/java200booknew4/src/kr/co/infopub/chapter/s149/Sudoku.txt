001: package kr.co.infopub.chapter.s136;
002: import java.util.ArrayList;
003: import java.util.Arrays;
004: import java.util.Collections;
005: // 연산자 오러로딩은 없다.
006: public class Sudoku {
007: 	boolean isShuffle=true;
008: 	double [][] sdoku;
009: 	double [][] basic;
010: 	int n;
011: 	public Sudoku(int n) {
012: 		this.n=n;
013: 		sdoku=new double[n*n][n*n];
014: 		basic=new double[n][n];
015: 	}
016: 	public Sudoku() {
017: 		this(3);
018: 	}
019: 	private void clear(){
020: 		int m=sdoku.length;
021: 		for (int i = 0; i < m; i++) {
022: 			Arrays.fill(sdoku[i], 0);
023: 		}
024: 	}
025: 	
026: 	public boolean isShuffle() {
027: 		return isShuffle;
028: 	}
029: 	public void setShuffle(boolean isShuffle) {
030: 		this.isShuffle = isShuffle;
031: 	}
032: 	private void init(){
033: 		for (int i = 0; i < n; i++) {
034: 			for (int j = 0; j <n; j++) {
035: 				basic[i][j]=i*n+j+1;
036: 				sdoku[i][j]=basic[i][j];
037: 			}
038: 		}
039: 	}
040: 	public void print2(){
041: 		System.out.println(new Matrix(sdoku));
042: 	}
043: 	public void print(){
044: 		StringBuffer sb=new StringBuffer();
045: 		for (int i = 0; i < sdoku.length; i++) {
046: 			sb.append("[\t");
047: 			for (int j = 0; j < sdoku[i].length; j++) {
048: 				sb.append((int)sdoku[i][j]+"\t");
049: 			}
050: 			sb.append("]");
051: 			sb.append("\n");
052: 		}
053: 		System.out.println(sb.toString());
054: 	}
055: 	private void shuffle(){
056: 		if(isShuffle()){
057: 			Matrix msdo=MatrixUtil.toTwoOne(new Matrix(basic));
058: 			double[][]mms=msdo.getMatrix();//1x9
059: 			ArrayList<Double> list=new ArrayList<Double>();
060: 			for (int i = 0; i < mms[0].length; i++) {
061: 				list.add(mms[0][i]);
062: 			}
063: 			Collections.shuffle(list);
064: 			for (int i = 0; i < mms[0].length; i++) {
065: 				mms[0][i]=list.get(i);
066: 			}
067: 			msdo=MatrixUtil.toOneTwo(new Matrix(mms),n,n);
068: 			basic=msdo.getMatrix();
069: 			for (int i = 0; i < n; i++) {
070: 				for (int j = 0; j <n; j++) {
071: 					sdoku[i][j]=basic[i][j];
072: 				}
073: 			}
074: 		}
075: 	}
076: 	public void make(){
077: 		clear();
078: 		init();
079: 		shuffle();
080: 		makeS1();
081: 		makeS2();
082: 		makeS3();
083: 		makeS4();
084: 		makeS5();
085: 		makeS6();
086: 		makeS7();
087: 		makeS8();
088: 	}
089: 	private double [][] x2={{0,1,0},{0,0,1},{1,0,0}};
090: 	private double [][] x1={{0,0,1},{1,0,0},{0,1,0}};
091: 	public void makeS1(){
092: 		Matrix s0=new Matrix(basic);
093: 		Matrix s1=MatrixUtil.mulMatrix( new Matrix(x2),s0);
094: 		for (int i = 0; i < n; i++) {
095: 			for (int j =0; j <n; j++) {
096: 				sdoku[i][j+n]=s1.getMatrix()[i][j];
097: 			}
098: 		}
099: 	}
100: 	public void makeS2(){
101: 		Matrix s0=new Matrix(basic);
102: 		Matrix s2=MatrixUtil.mulMatrix( new Matrix(x1),s0);
103: 		for (int i = 0; i < n; i++) {
104: 			for (int j =0; j <n; j++) {
105: 				sdoku[i][j+2*n]=s2.getMatrix()[i][j];
106: 			}
107: 		}
108: 	}
109: 	public void makeS3(){
110: 		Matrix s0=new Matrix(basic);
111: 		Matrix s3=MatrixUtil.mulMatrix( s0,new Matrix(x1));
112: 		for (int i = 0; i < n; i++) {
113: 			for (int j =0; j <n; j++) {
114: 				sdoku[i+n][j]=s3.getMatrix()[i][j];
115: 			}
116: 		}
117: 	}
118: 	public void makeS4(){
119: 		Matrix s0=new Matrix(basic);
120: 		Matrix s1=MatrixUtil.mulMatrix( new Matrix(x2),s0);
121: 		Matrix s4=MatrixUtil.mulMatrix( s1,new Matrix(x1));
122: 		for (int i = 0; i < n; i++) {
123: 			for (int j =0; j <n; j++) {
124: 				sdoku[i+n][j+n]=s4.getMatrix()[i][j];
125: 			}
126: 		}
127: 	}
128: 	public void makeS5(){
129: 		Matrix s0=new Matrix(basic);
130: 		Matrix s1=MatrixUtil.mulMatrix( new Matrix(x1),s0);
131: 		Matrix s5=MatrixUtil.mulMatrix( s1,new Matrix(x1));
132: 		for (int i = 0; i < n; i++) {
133: 			for (int j =0; j <n; j++) {
134: 				sdoku[i+n][j+2*n]=s5.getMatrix()[i][j];
135: 			}
136: 		}
137: 	}
138: 	public void makeS6(){
139: 		Matrix s0=new Matrix(basic);
140: 		Matrix s6=MatrixUtil.mulMatrix( s0,new Matrix(x2));
141: 		for (int i = 0; i < n; i++) {
142: 			for (int j =0; j <n; j++) {
143: 				sdoku[i+2*n][j]=s6.getMatrix()[i][j];
144: 			}
145: 		}
146: 	}
147: 	public void makeS7(){
148: 		Matrix s0=new Matrix(basic);
149: 		Matrix s1=MatrixUtil.mulMatrix( new Matrix(x2),s0);
150: 		Matrix s7=MatrixUtil.mulMatrix( s1,new Matrix(x2));
151: 		for (int i = 0; i < n; i++) {
152: 			for (int j =0; j <n; j++) {
153: 				sdoku[i+2*n][j+n]=s7.getMatrix()[i][j];
154: 			}
155: 		}
156: 	}
157: 	public void makeS8(){
158: 		Matrix s0=new Matrix(basic);
159: 		Matrix s1=MatrixUtil.mulMatrix( new Matrix(x1),s0);
160: 		Matrix s8=MatrixUtil.mulMatrix( s1,new Matrix(x2));
161: 		for (int i = 0; i < n; i++) {
162: 			for (int j =0; j <n; j++) {
163: 				sdoku[i+2*n][j+2*n]=s8.getMatrix()[i][j];
164: 			}
165: 		}
166: 	}
167: }
